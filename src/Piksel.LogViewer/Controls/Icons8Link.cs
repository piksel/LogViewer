using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

namespace Piksel.LogViewer.Controls
{
    public class Icons8Link : LinkLabel
    {
        readonly byte[] res_icons8_logo_16px_png = {
            0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
            0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x08,0x06,0x00,0x00,0x00,0x1f,0xf3,0xff,
            0x61,0x00,0x00,0x00,0x06,0x62,0x4b,0x47,0x44,0x00,0xff,0x00,0xff,0x00,0xff,0xa0,
            0xbd,0xa7,0x93,0x00,0x00,0x01,0xbb,0x49,0x44,0x41,0x54,0x38,0x11,0xad,0x53,0xe9,
            0x2e,0x03,0x51,0x18,0x3d,0x77,0x3a,0x91,0x88,0xe5,0x01,0x34,0xa8,0x25,0xbc,0x00,
            0xf1,0x43,0x2c,0xb1,0x34,0x04,0xd5,0xf6,0x41,0x08,0xf1,0x12,0x34,0x21,0x21,0x5e,
            0xc3,0x94,0x5a,0x82,0x04,0x09,0x11,0xe2,0x05,0x10,0x09,0xa9,0xb6,0x2f,0xd0,0x16,
            0x89,0xce,0x5c,0xe7,0x9b,0x30,0xc6,0x52,0x91,0xd0,0x7e,0xe7,0xf6,0x7c,0xe7,0x5b,
            0xe6,0xbb,0x73,0x6f,0x81,0x3f,0x7e,0x54,0xb9,0xfa,0xc8,0x7a,0xa4,0xdd,0xd6,0xaa,
            0x5e,0xe2,0xda,0x31,0xd2,0xdb,0x71,0xeb,0x5a,0xf8,0x67,0x7c,0x69,0x30,0xb1,0x16,
            0xeb,0xd3,0x4a,0x27,0x98,0xd8,0x49,0x78,0xc6,0xc4,0x73,0x68,0x35,0x97,0x8a,0x5b,
            0x27,0x9e,0x48,0x42,0x9d,0xeb,0xab,0x8d,0x5b,0xd1,0x69,0xd2,0x45,0xc2,0x20,0xbe,
            0x33,0x5b,0x03,0x33,0x5b,0xb1,0xe4,0xca,0x5b,0xd0,0x6b,0x30,0x61,0x45,0xc3,0x0c,
            0xee,0x30,0x50,0xae,0x98,0x21,0xd7,0x1c,0xa5,0xd5,0x30,0x27,0x39,0x10,0xcf,0x94,
            0x45,0xc0,0xe2,0x79,0xfe,0x1a,0x0d,0x35,0x0d,0x18,0x69,0x0a,0x03,0x14,0x76,0xee,
            0x76,0xa1,0xf8,0xf5,0xfb,0xf7,0xf9,0x7b,0x83,0x5b,0x5c,0x60,0x6e,0x07,0xc1,0x28,
            0xd7,0x51,0x2b,0xda,0x12,0x00,0x6e,0x42,0xb5,0x8d,0x58,0xec,0x4f,0x20,0x5b,0xc8,
            0x52,0x05,0x82,0xd5,0x41,0x26,0x28,0x64,0x0a,0x19,0xd7,0xaf,0xab,0x0a,0x62,0xe6,
            0x68,0x0e,0xe9,0x7c,0x1a,0x2a,0x60,0x37,0xa7,0x22,0xa9,0x5b,0x77,0x5c,0x13,0x68,
            0x93,0x8c,0xe1,0xc6,0x21,0x64,0xf2,0x59,0x4c,0x1d,0xcc,0xba,0x78,0x2c,0x3d,0xa1,
            0xf8,0xfc,0xe0,0x72,0xd1,0x72,0xc5,0x1c,0xc2,0xa1,0x41,0x49,0x85,0x5d,0x32,0xdb,
            0x85,0xb8,0x0d,0x84,0x08,0x94,0x52,0x9c,0x9c,0xb3,0x8b,0xe3,0xc2,0xcf,0x45,0xd0,
            0x9c,0xe8,0x43,0x09,0xf8,0x70,0xc0,0x71,0x02,0x57,0xca,0xb0,0xb1,0x77,0xb7,0x8f,
            0x91,0x50,0x18,0xcb,0x03,0x72,0x10,0x40,0xa5,0x59,0xc9,0x02,0xe5,0xf9,0xb2,0x85,
            0xc4,0xc5,0x92,0x74,0x42,0x85,0xd2,0x97,0x42,0xfc,0xa7,0x70,0xc6,0xe7,0x75,0xfd,
            0xe2,0x25,0x4a,0xdd,0xe9,0x66,0x2c,0xd9,0x2d,0xc4,0x6b,0x30,0x96,0x9c,0xec,0xe1,
            0xf1,0x1c,0x52,0x0c,0x10,0x3f,0x19,0x2f,0xa8,0xee,0xdd,0x8a,0xae,0x9f,0x4a,0x92,
            0xb7,0x21,0x0a,0xc7,0x6c,0x30,0x4b,0xd1,0x21,0xca,0x99,0xcd,0xdb,0x38,0xcd,0x5c,
            0xb7,0x58,0x92,0xbc,0x06,0xe2,0xf0,0x72,0x2c,0xb3,0xc9,0x00,0xc7,0x3a,0x17,0xff,
            0x03,0x94,0x3e,0x63,0xac,0x7f,0x33,0x6e,0xad,0xfa,0x75,0xe6,0xfa,0xdd,0x77,0xce,
            0x3f,0x53,0x5d,0x09,0x68,0x15,0xc5,0xe4,0x1d,0xd9,0x98,0xdc,0xc8,0x09,0xff,0x77,
            0xbc,0x00,0xc3,0x7c,0x9c,0xfb,0x1d,0x5b,0x81,0x7b,0x00,0x00,0x00,0x00,0x49,0x45,
            0x4e,0x44,0xae,0x42,0x60,0x82
        };

        private string prefixText = "Uses icons from";
        private string suffixText;
        private bool showIcon = true;
        const string Icons8Name = "Icons8";
        const int Icons8Length = 6;
        const int IconPadding = 20;

        const string LinkColorString = "31, 120, 47";
        const string LinkActiveColorString = "50, 194, 77";

        public Icons8Link()
        {

            ActiveLinkColor = Color.FromArgb(50, 194, 77);
            UpdateImage();
            ImageAlign = ContentAlignment.MiddleLeft;
            Padding = new Padding(16, 0, 0, 0);
            LinkColor = Color.FromArgb(31, 120, 47);
            TextAlign = ContentAlignment.MiddleLeft;
            VisitedLinkColor = Color.FromArgb(31, 120, 47);
            LinkClicked += (s, e) => Process.Start("https://icons8.com/");
            UpdateText();
        }

        private void UpdateImage()
        {
            if (showIcon)
            {
                using (var ms = new MemoryStream(res_icons8_logo_16px_png, false))
                {
                    base.Image = Image.FromStream(ms);
                }
                var p = Padding;
                p.Left += IconPadding;
                Padding = p;
            }
            else
            {
                base.Image = null;
                var p = Padding;
                p.Left = Math.Max(0, p.Left - IconPadding);
                Padding = p;
            }
            Debug.WriteLine($"ShowIcon: {showIcon}, Padding: {Padding}");
        }

        protected void UpdateText()
        {
            if (string.IsNullOrEmpty(prefixText))
            {
                base.Text = string.IsNullOrEmpty(suffixText)
                    ? Icons8Name
                    : Icons8Name + " " + suffixText;
                base.LinkArea = new LinkArea(0, Icons8Length);
            }
            else
            {
                base.Text = prefixText + " " + Icons8Name + " " + suffixText;
                base.LinkArea = new LinkArea(prefixText.Length + 1, Icons8Length);
            }
        }

        [Browsable(true)]
        [Category("Appearance")]
        [DefaultValue("Uses icons from")]
        public string TextPrefix {
            get => prefixText;
            set
            {
                prefixText = value;
                UpdateText();
            }
        }

        [Browsable(true)]
        [Category("Appearance")]
        [DefaultValue("")]
        public string TextSuffix
        {
            get => suffixText;
            set
            {
                suffixText = value;
                UpdateText();
            }
        }

        [Browsable(true)]
        [Category("Appearance")]
        [DefaultValue(true)]
        public bool ShowIcon {
            get => showIcon;
            set {
                if (value != showIcon)
                {
                    showIcon = value;
                    UpdateImage();
                }
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new string Text
        {
            get => base.Text;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new LinkArea LinkArea
        {
            get => base.LinkArea;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Image Image
        {
            get => base.Image;
        }

        [DefaultValue(typeof(Color), LinkColorString)]
        public new Color LinkColor
        {
            get => base.LinkColor;
            set => base.LinkColor = value;
        }

        [DefaultValue(typeof(Color), LinkColorString)]
        public new Color VisitedLinkColor
        {
            get => base.VisitedLinkColor;
            set => base.VisitedLinkColor = value;
        }

        [DefaultValue(typeof(Color), LinkActiveColorString)]
        public new Color ActiveLinkColor
        {
            get => base.ActiveLinkColor;
            set => base.ActiveLinkColor = value;
        }

        protected override void OnPaddingChanged(EventArgs e)
        {
            base.OnPaddingChanged(e);
            if (showIcon && Padding.Left < IconPadding)
            {
                Padding = new Padding(IconPadding, Padding.Top, Padding.Right, Padding.Bottom);
            }
        }

    }
}
